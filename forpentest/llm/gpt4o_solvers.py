from openai import OpenAI 
from logger import logger

from .base import LLMSolver, extract_from_json

import json
import time

from config import base_url, api_key

## Set the API key and model name
MODEL="gpt-4o"

system_prompt = '''\
你将作为一名专业的运维，负责审核开发上传的配置文件中是否存在敏感信息。一旦你遗漏了任何可能的敏感信息，可能会给生产环境带来一定的安全隐患。
'''

class GPT4OSolver(LLMSolver):
    def __init__(self):
        super().__init__(system_prompt)
        self.client = OpenAI(api_key=api_key, base_url=base_url)

    def ask_gpt(self, prompt, timeout = 8.0):
        logger.info(f"{prompt = }\n{timeout = }")
        logger.info(f"{self.history = }")
        self.history.append({"role": "user", "content": prompt})
        completion_vulnerability = self.client.chat.completions.create(
            model=MODEL,
            messages=self.history,
            timeout=timeout
        )
        reply = completion_vulnerability.choices[0].message.content
        logger.info(f"{reply = }")
        try:
            replyjson = json.loads(reply)
        except json.JSONDecodeError as e:
            # logger.error(f"in function aks_gpt, Invalid JSON format: {reply}")
            logger.error(f"in function aks_gpt, reask the question")
            logger.error(e)
            return None
        
        self.history.append({"role": "assistant", "content": reply})
        return replyjson
