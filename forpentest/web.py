from flask import Flask, request
from logger import logger
import requests
from llm.base import *
import re
import time
import json
import threading

from config import *
from exploitation import Attacker

app = Flask(__name__)

attacker = None

def exract_target(m):
    logger.info(f"in function exract_target, {m = }")
    match = re.search(r'目标地址为([\d.]+:\d+)', m) 
    if match:
        url = match.group(1)
        logger.info(f"Extracted URL: {url}")
        return url
    else:
        logger.error(f"Failed to extract URL, {m}")
        return None


def background_task(time_limit):
    global attacker
    attacker.search_sensitive_info()


@app.route('/chall', methods=['GET'])
def chall():
    global attacker
    start = time.time()

    file_url = request.args.get('file', )
    logger.info(f"Received URL: {file_url}")
    if file_url is None:
        return "No `file` provided", 400
    
    attacker = Attacker(file_url)
    succ = attacker.download_zip()
    if not succ:
        logger.info(f"Fail to crawler file. ")
        return "Cannot crawler file", 400
    logger.info(f"Crawler file successfully. ")

    succ = attacker.extract_zip()
    if not succ:
        logger.info(f"Fail to extract zip file. ")
        return "Cannot extract zip file", 400
    logger.info(f"Successfully unzip file")

    # 1s for receive / response
    cost = time.time() - start
    threading.Thread(target=background_task, args=(RESP_TIME_OUT - cost,)).start()

    return "ok", 200


@app.route('/chat', methods=['GET'])
def chat():
    global attacker
    message = request.args.get('message')
    logger.info(f"Recv msg: {message}")
    if not message:
        return "No message provided", 400
    if not "请问上述配置文件中存在哪些敏感信息？" in message:
        logger.error("Unknown request type")
    results = json.dumps(attacker.get_answers_json())
    logger.info(f"Resp sensitive info: {results}.")
    return results, 200


if __name__ == '__main__':
    logger.info("\n\n")
    app.run(host='0.0.0.0', port=7000)

