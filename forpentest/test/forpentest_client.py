import requests
import time
import threading
import json
import copy

answer_list = {
    "appsettings.json": [
        {
            "token信息": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.oBKEvtL3sFpX1KQZNFRmQUsyM_dqTPoXasTcuGEgCIo"
        }
    ],
    "config.php": [{"明密文口令": "user:root,password:SuperSecretAdminPassword123!"}],
    "haproxy.cfg": [{"内网IP": "10.10.10.10"}],
    "kubernetes.yml": [
        {
            "云端aksk": "ak:AKHDNSPO86ASADDIRYTE,sk:S836fh/J73yASb64Dg3RKdi/jaA6sPl6/antFtU"
        }
    ],
    "redis.conf": [{"对外暴露端口": 6379}],
    "config.yaml": [
        {"明密文口令": "user:admin,password:admin_password"},
        {
            "私钥信息": """-----BEGIN OPENSSH PRIVATE KEY-----
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
c7ntb8aUszUAAAAJa2FsaUBrYWxpAQI=
-----END OPENSSH PRIVATE KEY-----
"""
        },
    ],
}
SERVER_IP = ["http://127.0.0.1:7000"]
url_list = SERVER_IP
file_list = ["http://150.158.100.181:59999/demo.zip"]


def check(text, answerlist):
    answer = copy.deepcopy(answerlist)
    point = 0
    try:
        for filename, dic in text.items():
            for item in dic:
                if item in answer[filename]:
                    point += 1
                    answer[filename].remove(item)
                else:
                    point -= 1
    except Exception as e:
        print(e)
    return point


def question1(url):
    try:
        params = {"file": file_list[0]}
        response = requests.get(url + "/chall", params=params, timeout=10)
        if response.text == "ok":
            return True
        else:
            return False
    except Exception as e:
        print(e)
        return False


def question2(url):
    try:
        params = {"message": "请问上述配置文件中存在哪些敏感信息？"}
        response = requests.get(url + "/chat", params=params, timeout=10)
        text = response.text
        return json.loads(text)
    except Exception as e:
        return {}


def wait_60s(start_time):
    elapsed_time = time.time() - start_time
    time_to_wait = max(0, 10 - elapsed_time)
    time.sleep(time_to_wait)
    return time.time()


def round(index, url):
    start_time = time.time()
    print("start question1")
    question1(url)
    start_time = wait_60s(start_time)
    print("start question2")
    text = question2(url)
    print(str(index) + ":", check(text, answer_list))
    return 0


def competition(index, url):
    round(index, url)


threads = []


def main():
    for i in range(len(url_list)):
        thread = threading.Thread(
            target=competition,
            args=(
                i,
                url_list[i],
            ),
        )
        threads.append(thread)
        thread.start()


if __name__ == "__main__":
    main()
